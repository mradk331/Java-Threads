/*
 * Class performs a complete introspection of an object at runtime
 * returning names of declaring class, immediate superclass, the interfaces class
 * implements, the methods the class declares, constructors it declares, and
 * fields it declares.
 */
public class Inspector {

	public void inspect(Object obj, boolean recursive) {
		
		Class specifiedObject = obj.getClass();
		
		//Print name of declaring class
		System.out.println("Name of the declaring class: " + specifiedObject.getName());
		
		//Print name of the immediate superclass
		System.out.println("Name of the immediate superclass: " + specifiedObject.getSuperclass().getName());
		
		//Get names of interfaces class implements
		findInterfaces(specifiedObject);
		
		
		
	}
	
	public void findInterfaces(Class specifiedObject) {
		
		//Store the interfaces into an array
		Class[] objectInterfaces = specifiedObject.getInterfaces();
		
		//Check that there are interfaces contained within the object class
		if (objectInterfaces.length > 0) {
			
			//Print out all interfaces class implements
			for (int i = 0; i < objectInterfaces.length; i++) {
				
				System.out.println("Interfaces class implements: " + objectInterfaces[i].getName());
			}
		}
	}
}
